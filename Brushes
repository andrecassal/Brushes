

class PBrushes{
	constructor(img, maxLength=40, maxBrightness=150){
		this.pens = [];
		this.img = img;
		this.maxLength = maxLength;
		this.maxBrightness = maxBrightness;
		this.finishCount = 0;
	}
	add(brush){
		this.pens.push(brush);
	}
	build(amount){
		for(let i=0;i<amount;i++){
			let p = this.onBuild(i,amount);
			if(p != false){
				this.pens.push( p );
			}
		}
	}
	onBuild(i,t){
		let p 			= new PSingleLineBrush();
		p.img 			= this.img;
		p.index 		= i;
		p.amount 		= floor(map(v.brightness,0,this.maxBrightness, 300,100));
		// p.curveTightness = map(i,0,t, -1, 3);
		p.maxLength = map(v.brightness,0,this.maxBrightness, 100,50);
		p.maxBrightness 	= map(i,0,t, 100,50); //v.brightness; 
		p.minBrightness		= 0//map(i,0,t, 50,0);
		// p.color 	= pal.random();
		// p.color 		= color(0,0,200,150);
	}
	render(){
		for(let p of this.pens){
			if(p.render()==false){
				this.finishCount++;
				if(this.finishCount>this.pens.length){
					this.onFinish();
				}
			}
		}
	}
	onFinish(){
		noLoop();
	}
}












class PAnimatedCurvedBrush{
	constructor(){
		this.amount = 200;
		this.count=0;
		this.maxLength = 40;
		this.maxBrightness = 60;
		this.minBrightness = 0;
		this.pos = false;
		this.img = false;
		this.alpha = 55;
		this.curveTightness = 0;
		this.color = color(0);
	}
	render(){
		if(!this.img){ return false}
		if(this.count>this.amount){ return true }
		this.pos = this.pos || this.find(createVector(random(this.img.width),random(this.img.height)));
		this.color.setAlpha( this.alpha );
		stroke(this.color);
		// stroke(pal.random());
		let temp = false,corner=false;
		if(this.pos){
			corner = this.find(this.pos);
			temp = this.find(corner);
			beginShape();
			vertex(this.pos.x,this.pos.y)
			quadraticVertex(temp.x,temp.y, corner.x,corner.y);
			endShape();
		}
		this.pos = temp;
		this.count++;
	}
	getLength(v){
		if(v && v.brightness){
			return map(v.brightness,this.minBrightness,this.maxBrightness, this.maxLength,this.maxLength/3);
		}
		return this.maxLength;
	}
	find(ovct){
		if(!ovct){ return false}
		let x,y,p,i=30,m1,m2;
		m2 = this.getLength(ovct);
		m1 = -m2;
		while(--i > 0){
			x = floor(ovct.x + random(m1,m2));
			y = floor(ovct.y + random(m1,m2));
			p = this.img.get(x,y)[0];
			if(	typeof p == 'number' 
				 	&& p >= this.minBrightness 
				 	&& p <= this.maxBrightness
					&& x <= this.img.width
					&& y <= this.img.height){
				let v = createVector(x,y);
				// ovct.add(x,y);
				v.brightness = p;
				return v;
				// break;
			}
		}
		return ovct;
	}
}









class PAnimatedBrush{
	constructor(){
		this.amount = 200;
		this.count=0;
		this.maxLength = 40;
		this.maxBrightness = 60;
		this.minBrightness = 0;
		this.pos = false;
		this.img = false;
		this.alpha = 55;
		this.curveTightness = 0;
		this.color = color(0);
	}
	render(){
		if(!this.img){ return false}
		if(this.count>this.amount){ return true }
		this.pos = this.pos || this.find(createVector(random(this.img.width),random(this.img.height)));
		this.color.setAlpha( this.alpha );
		stroke(this.color);
		// stroke(pal.random());
		let temp = false;
		if(this.pos){
			temp = this.find(this.pos);
			line(temp.x,temp.y, this.pos.x,this.pos.y);
		}
		this.pos = temp;
		this.count++;
	}
	getLength(v){
		if(v && v.brightness){
			return map(v.brightness,this.minBrightness,this.maxBrightness, this.maxLength,this.maxLength/3);
		}
		return this.maxLength;
	}
	find(ovct){
		if(!ovct){ return false}
		let x,y,p,i=30,m1,m2;
		m2 = this.getLength(ovct);
		m1 = -m2;
		while(--i > 0){
			x = floor(ovct.x + random(m1,m2));
			y = floor(ovct.y + random(m1,m2));
			p = this.img.get(x,y)[0];
			if(	typeof p == 'number' 
				 	&& p >= this.minBrightness 
				 	&& p <= this.maxBrightness
					&& x <= this.img.width
					&& y <= this.img.height){
				let v = createVector(x,y);
				// ovct.add(x,y);
				v.brightness = p;
				return v;
				// break;
			}
		}
		return ovct;
	}
}
